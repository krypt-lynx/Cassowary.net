/*
  Cassowary.net: an incremental constraint solver for .NET
  (http://lumumba.uhasselt.be/jo/projects/cassowary.net/)
  
  Copyright (C) 2005-2006  Jo Vermeulen (jo.vermeulen@uhasselt.be)
  
  This program is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public License
  as published by the Free Software Foundation; either version 2.1
  of  the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*/

using System.Threading;

namespace Cassowary
{

    /// <summary>
    /// A base class for all variable types
    /// </summary>
    public abstract partial class ClAbstractVariable
    {
        /// <summary>
        /// creates variable with custom name
        /// </summary>
        /// <param name="name">nariable name</param>
        protected ClAbstractVariable(string name)
        {
            Name = name;
            Interlocked.Increment(ref _numCreated);
        }

        /// <summary>
        /// creates variable with autogenerated name
        /// </summary>
        protected ClAbstractVariable()
        {
            Name = "v" + Interlocked.Increment(ref _numCreated);
        }

        /// <summary>
        /// creates variable with autogenerated name
        /// </summary>
        /// <param name="varnumber">
        /// variable id
        /// </param>
        /// <param name="prefix">
        /// variable name prefix
        /// </param>
        protected ClAbstractVariable(long varnumber, string prefix)
        {
            Name = prefix + varnumber;
            Interlocked.Increment(ref _numCreated);
        }

        /// <summary>
        /// variable name
        /// </summary>
        public string Name { get; private set; }

        /// <summary>
        /// a placeholder variable
        /// </summary>
        public virtual bool IsDummy
        {
            get { return false; }
        }

        /// <summary>
        /// indicates variable was added from outside of solver and should be preserved
        /// </summary>
        public abstract bool IsExternal { get; }

        /// <summary>
        /// variable can be pivoted (TODO: proper description)
        /// </summary>
        public abstract bool IsPivotable { get; }

        /// <summary>
        /// variable can not be negative
        /// </summary>
        public abstract bool IsRestricted { get; }
        

        private static int _numCreated = 0;

    }
}