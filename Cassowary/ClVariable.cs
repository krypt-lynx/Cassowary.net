/*
  Cassowary.net: an incremental constraint solver for .NET
  (http://lumumba.uhasselt.be/jo/projects/cassowary.net/)
  
  Copyright (C) 2005-2006  Jo Vermeulen (jo.vermeulen@uhasselt.be)
  
  This program is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public License
  as published by the Free Software Foundation; either version 2.1
  of  the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*/

using System.Globalization;

namespace Cassowary
{
    /// <summary>
    /// Linear Variable representation
    /// </summary>
    public class ClVariable
        : ClAbstractVariable
    {
        /// <summary>
        /// creates variable with custom name
        /// </summary>
        /// <param name="name">nariable name</param>
        public ClVariable(string name, double value)
            : base(name)
        {
            Value = value;
        }

        /// <summary>
        /// creates variable with custom name
        /// </summary>
        /// <param name="name">nariable name</param>
        public ClVariable(string name)
            : base(name)
        {
            Value = 0.0;
        }

        /// <summary>
        /// creates variable and sets its value
        /// </summary>
        /// <param name="value">value</param>
        public ClVariable(double value)
        {
            Value = value;
        }

        /// <summary>
        /// creates variable with autogenerated name and sets its value
        /// </summary>
        /// <param name="number">
        /// variable id
        /// </param>
        /// <param name="prefix">
        /// variable name prefix
        /// </param>
        /// <param name="value">value</param>
        public ClVariable(long number, string prefix, double value = 0.0)
            : base(number, prefix)
        {
            Value = value;
        }

        /// <summary>
        /// a placeholder variable
        /// </summary>
        public override bool IsDummy
        {
            get { return false; }
        }

        /// <summary>
        /// indicates variable was added from outside of solver and should be preserved
        /// </summary>
        public override bool IsExternal
        {
            get { return true; }
        }


        /// <summary>
        /// variable can be pivoted (TODO: proper description)
        /// </summary>
        public override bool IsPivotable
        {
            get { return false; }
        }

        /// <summary>
        /// variable can not be negative
        /// </summary>
        public override bool IsRestricted
        {
            get { return false; }
        }

        /// <summary>Returns a string that represents the current object.Converts to string.</summary>
        public override string ToString()
        {
            return "[" + Name + ":" + Value.ToString(CultureInfo.InvariantCulture) + "]";
        }


        /// <summary>
        ///   <para>Current value of the variable</para>
        /// </summary>
        public double Value { get; set; }
    }
}